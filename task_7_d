#include <algorithm>
#include <iostream>
#include <vector>

static int cnt = 1;
static int maxcolour = 1;

class MyGraph {
public:
    MyGraph(int vertexes_amount) {
        std::vector<std::vector<int>> graph(vertexes_amount + 1);
        std::vector<std::vector<int>> graphi(vertexes_amount + 1);

        std::vector<std::string> colour(vertexes_amount + 1, "white");
        std::vector<std::pair<int, int>> leave(vertexes_amount);

        for (int i = 0; i < vertexes_amount; i++) {
            leave[i] = {0, i + 1};
        }

        std::vector<int> colour2(vertexes_amount + 1, 0);
        std::vector<bool> used(vertexes_amount + 1, true);
    }

    void PushElems(int from, int too) {
        graph[too].push_back(from);
        graphi[from].push_back(too);
    }

    void Dfs(int vertex) {
        colour[vertex] = "grey";
        for (int son : graph[vertex]) {
            if (colour[son] == "white") {
                Dfs(son);
            } else if (colour[son] == "grey") {
            }
        }
        colour[vertex] = "black";
        leave[vertex - 1].first = cnt;
        cnt += 1;
    }

    void Ans(int vertex) {
        used[vertex] = false;
        colour[vertex] = maxcolour;
        for (int colour_tmp : graph[vertex]) {
            if (colour[colour_tmp] == 0) {
                Ans(colour_tmp);
            }
        }
    }

    void MakeProgram() {
        int vertexes_amount = used.size() - 1;
        for (int i = 1; i < vertexes_amount + 1; i++) {
            if (colour[i] == "white") {
                Dfs(i);
            }
        }

        std::sort(leave.begin(), leave.end());

        for (int i = 0; i < vertexes_amount; i++) {
            int myvert = leave[leave.size() - 1 - i].second;
            if (used[myvert]) {
                Ans(myvert);
                maxcolour += 1;
            }
        }

        std::cout << maxcolour - 1 << '\n';
        for (int i = 1; i < vertexes_amount + 1; i++) {
            std::cout << maxcolour - colour2[i] << ' ';
        }
    }

private:
    std::vector<std::vector<int>> graph;
    std::vector<std::vector<int>> graphi;
    std::vector<std::string> colour;
    std::vector<std::pair<int, int>> leave;
    std::vector<int> colour2;
    std::vector<bool> used;
};

int main() {
    int vertexes_amount;
    int edges_amount;
    std::cin >> vertexes_amount >> edges_amount;
    MyGraph graph(vertexes_amount);

    for (int i = 0; i < edges_amount; i++) {
        int from;
        int too;
        std::cin >> from >> too;
        graph.PushElems(from, too);
    }

    graph.MakeProgram();
}
